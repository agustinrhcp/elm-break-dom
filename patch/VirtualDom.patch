--- Kernel/original_VirtualDom.js	2019-10-05 04:17:25.000000000 +0900
+++ Kernel/VirtualDom.js	2019-10-22 23:55:18.000000000 +0900
@@ -419,7 +419,9 @@
 
 	if (tag === __2_TEXT)
 	{
-		return _VirtualDom_doc.createTextNode(vNode.__text);
+		var n = _VirtualDom_doc.createTextNode(vNode.__text);
+		n.created_by_elm = true;
+		return n
 	}
 
 	if (tag === __2_TAGGER)
@@ -454,6 +456,7 @@
 	var domNode = vNode.__namespace
 		? _VirtualDom_doc.createElementNS(vNode.__namespace, vNode.__tag)
 		: _VirtualDom_doc.createElement(vNode.__tag);
+	domNode.created_by_elm = true;
 
 	if (_VirtualDom_divertHrefToApp && vNode.__tag == 'a')
 	{
@@ -1313,14 +1316,57 @@
 
 	var vKids = vNode.__kids;
 	var childNodes = domNode.childNodes;
-	for (var j = 0; j < vKids.length; j++)
+	for (var j = 0, k = 0; j < Math.max(vKids.length, childNodes.length); j++, k++)
 	{
 		low++;
 		var vKid = tag === __2_NODE ? vKids[j] : vKids[j].b;
 		var nextLow = low + (vKid.__descendantsCount || 0);
+
+		// 1. if unknown nodes have been inserted
+		if(childNodes.length > vKids.length)
+		{
+			// skip them
+			while(!childNodes[k].created_by_elm)
+			{
+				k++
+			}
+		}
+		// 2. if existing node has been removed
+		if(childNodes.length < vKids.length)
+		{
+			if(childNodes[k])
+			{
+				// replace tha node using the old vdom
+				console.log("WARN 1: restoring DOM")
+				_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+			}
+			else
+			{
+				console.log("WARN 2: restoring DOM")
+				domNode.appendChild(_VirtualDom_render(vKids[j], eventNode));
+			}
+		}
+		// 3. if existing node has been replaced with unknown node
+		if(childNodes.length === vKids.length)
+		{
+			if(!childNodes[k].created_by_elm)
+			{
+				// replace tha node using the old vdom
+				console.log("WARN 3: restoring DOM")
+				_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+			}
+		}
+
+		// 4. this is needed for some edge cases
+		if(vKids[j].$ === __2_NODE && (childNodes[k].tagName || "").toLowerCase() !== vKids[j].__tag)
+		{
+			console.log("WARN 4: restoring DOM")
+			_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+		}
+
 		if (low <= index && index <= nextLow)
 		{
-			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
+			i = _VirtualDom_addDomNodesHelp(childNodes[k], vKid, patches, i, low, nextLow, eventNode);
 			if (!(patch = patches[i]) || (index = patch.__index) > high)
 			{
 				return i;
@@ -1393,9 +1439,30 @@
 
 		case __3_REMOVE_LAST:
 			var data = patch.__data;
-			for (var i = 0; i < data.__diff; i++)
+			if(domNode.childNodes.length === data.__diff + data.__length)
 			{
-				domNode.removeChild(domNode.childNodes[data.__length]);
+				// original logic
+				for (var i = 0; i < data.__diff; i++)
+				{
+					domNode.removeChild(domNode.childNodes[data.__length]);
+				}
+			}
+			else
+			{
+				// Something should have been broken
+				console.log("WARN 0: restoring DOM")
+				var removed = 0;
+				var index = domNode.childNodes.length - 1;
+				while (removed < data.__diff)
+				{
+					var childNode = domNode.childNodes[index];
+					if(childNode.created_by_elm)
+					{
+						domNode.removeChild(childNode);
+						removed++;
+					}
+					index--;
+				}
 			}
 			return domNode;
 
@@ -1510,6 +1577,7 @@
 
 function _VirtualDom_virtualize(node)
 {
+	node.created_by_elm = true;
 	// TEXT NODES
 
 	if (node.nodeType === 3)
