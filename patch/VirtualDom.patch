--- Kernel/original_VirtualDom.js	2019-10-04 06:46:25.000000000 +0900
+++ Kernel/VirtualDom.js	2019-10-04 07:34:19.000000000 +0900
@@ -419,7 +419,9 @@
 
 	if (tag === __2_TEXT)
 	{
-		return _VirtualDom_doc.createTextNode(vNode.__text);
+		var n = _VirtualDom_doc.createTextNode(vNode.__text);
+		n.created_by_elm = true;
+		return n
 	}
 
 	if (tag === __2_TAGGER)
@@ -454,6 +456,7 @@
 	var domNode = vNode.__namespace
 		? _VirtualDom_doc.createElementNS(vNode.__namespace, vNode.__tag)
 		: _VirtualDom_doc.createElement(vNode.__tag);
+	domNode.created_by_elm = true;
 
 	if (_VirtualDom_divertHrefToApp && vNode.__tag == 'a')
 	{
@@ -1313,14 +1316,36 @@
 
 	var vKids = vNode.__kids;
 	var childNodes = domNode.childNodes;
-	for (var j = 0; j < vKids.length; j++)
+	for (var j = 0, k = 0; j < Math.max(vKids.length, childNodes.length); j++, k++)
 	{
 		low++;
 		var vKid = tag === __2_NODE ? vKids[j] : vKids[j].b;
 		var nextLow = low + (vKid.__descendantsCount || 0);
 		if (low <= index && index <= nextLow)
 		{
-			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
+			// 1. if unknown nodes have been inserted
+			if(childNodes.length > vKids.length) {
+				// skip them
+				while(!childNodes[k].created_by_elm) {
+					k++
+				}
+			}
+			// 2. if existing node has been removed
+			if(childNodes.length < vKids.length) {
+				if(childNodes[k]) {
+					// replace tha node using the old vdom
+					_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+				} else {
+					// or append node using the old vdom
+					domNode.appendChild(_VirtualDom_render(vKids[j], eventNode));
+				}
+			}
+			// 3. if existing node has been replaced with unknown node
+			if(childNodes.length === vKids.length && !childNodes[k].created_by_elm) {
+				// replace tha node using the old vdom
+				_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+			}
+			i = _VirtualDom_addDomNodesHelp(childNodes[k], vKid, patches, i, low, nextLow, eventNode);
 			if (!(patch = patches[i]) || (index = patch.__index) > high)
 			{
 				return i;
@@ -1374,6 +1399,13 @@
 			return domNode;
 
 		case __3_TEXT:
+				if(!domNode.replaceData) {
+					// TODO: this should not be necessary
+					const textNode = document.createTextNode(patch.s);
+					domNode.parentNode.insertBefore(textNode, domNode);
+					domNode.remove();
+					return textNode;
+				}
 			domNode.replaceData(0, domNode.length, patch.__data);
 			return domNode;
 
