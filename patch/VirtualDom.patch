--- Kernel/original_VirtualDom.js	2019-10-05 04:17:25.000000000 +0900
+++ Kernel/VirtualDom.js	2019-10-05 21:18:52.000000000 +0900
@@ -419,7 +419,9 @@
 
 	if (tag === __2_TEXT)
 	{
-		return _VirtualDom_doc.createTextNode(vNode.__text);
+		var n = _VirtualDom_doc.createTextNode(vNode.__text);
+		n.created_by_elm = true;
+		return n
 	}
 
 	if (tag === __2_TAGGER)
@@ -454,6 +456,7 @@
 	var domNode = vNode.__namespace
 		? _VirtualDom_doc.createElementNS(vNode.__namespace, vNode.__tag)
 		: _VirtualDom_doc.createElement(vNode.__tag);
+	domNode.created_by_elm = true;
 
 	if (_VirtualDom_divertHrefToApp && vNode.__tag == 'a')
 	{
@@ -1313,14 +1316,47 @@
 
 	var vKids = vNode.__kids;
 	var childNodes = domNode.childNodes;
-	for (var j = 0; j < vKids.length; j++)
+	for (var j = 0, k = 0; j < Math.max(vKids.length, childNodes.length); j++, k++)
 	{
 		low++;
 		var vKid = tag === __2_NODE ? vKids[j] : vKids[j].b;
 		var nextLow = low + (vKid.__descendantsCount || 0);
+
+		// 1. if unknown nodes have been inserted
+		if(childNodes.length > vKids.length)
+		{
+			// skip them
+			while(!childNodes[k].created_by_elm) {
+				k++
+			}
+		}
+		// 2. if existing node has been removed
+		if(childNodes.length < vKids.length)
+		{
+			if(childNodes[k])
+			{
+				// replace tha node using the old vdom
+				_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+			}
+			else
+			{
+				// or append node using the old vdom
+				domNode.appendChild(_VirtualDom_render(vKids[j], eventNode));
+			}
+		}
+		// 3. if existing node has been replaced with unknown node
+		if(childNodes.length === vKids.length)
+		{
+			if(!childNodes[k].created_by_elm)
+			{
+				// replace tha node using the old vdom
+				_VirtualDom_applyPatchRedraw(childNodes[k], vKids[j], eventNode)
+			}
+		}
+
 		if (low <= index && index <= nextLow)
 		{
-			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
+			i = _VirtualDom_addDomNodesHelp(childNodes[k], vKid, patches, i, low, nextLow, eventNode);
 			if (!(patch = patches[i]) || (index = patch.__index) > high)
 			{
 				return i;
@@ -1367,20 +1403,25 @@
 	switch (patch.$)
 	{
 		case __3_REDRAW:
+			// console.log("3_REDRAW")
 			return _VirtualDom_applyPatchRedraw(domNode, patch.__data, patch.__eventNode);
 
 		case __3_FACTS:
+			// console.log("3_FACTS")
 			_VirtualDom_applyFacts(domNode, patch.__eventNode, patch.__data);
 			return domNode;
 
 		case __3_TEXT:
+			// console.log("3_TEXT")
 			domNode.replaceData(0, domNode.length, patch.__data);
 			return domNode;
 
 		case __3_THUNK:
+			// console.log("3_THUNK")
 			return _VirtualDom_applyPatchesHelp(domNode, patch.__data);
 
 		case __3_TAGGER:
+			// console.log("3_TAGGER")
 			if (domNode.elm_event_node_ref)
 			{
 				domNode.elm_event_node_ref.__tagger = patch.__data;
@@ -1392,14 +1433,36 @@
 			return domNode;
 
 		case __3_REMOVE_LAST:
+			// console.log("3_REMOVE_LAST")
 			var data = patch.__data;
-			for (var i = 0; i < data.__diff; i++)
+			if(domNode.childNodes.length === data.__diff + data.__length)
 			{
-				domNode.removeChild(domNode.childNodes[data.__length]);
+				// original logic
+				for (var i = 0; i < data.__diff; i++)
+				{
+					domNode.removeChild(domNode.childNodes[data.__length]);
+				}
+			}
+			else
+			{
+				// there should have been some interruptions
+				var removed = 0;
+				var index = domNode.childNodes.length - 1;
+				while (removed < data.__diff)
+				{
+					var childNode = domNode.childNodes[index];
+					if(childNode.created_by_elm)
+					{
+						domNode.removeChild(childNode);
+						removed++;
+					}
+					index--;
+				}
 			}
 			return domNode;
 
 		case __3_APPEND:
+			// console.log("3_APPEND")
 			var data = patch.__data;
 			var kids = data.__kids;
 			var i = data.__length;
@@ -1411,6 +1474,7 @@
 			return domNode;
 
 		case __3_REMOVE:
+			// console.log("3_REMOVE")
 			var data = patch.__data;
 			if (!data)
 			{
@@ -1426,9 +1490,11 @@
 			return domNode;
 
 		case __3_REORDER:
+			// console.log("3_REORDER")
 			return _VirtualDom_applyPatchReorder(domNode, patch);
 
 		case __3_CUSTOM:
+			// console.log("3_CUSTOM")
 			return patch.__data(domNode);
 
 		default:
